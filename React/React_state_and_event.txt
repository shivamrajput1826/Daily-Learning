Events=> <button onClick={}></button> in Parenthesis we want a function now this function will done inside a {} 
because this is a js expression
<button onClick={clickHandler}></button> not <button onClick={clickHandler()}></button> because we want it to point 
the function and execute it when button is clicked while in second case, as js is run-time, it will execute when
the code run and it will not wait for click.....

Any component is a function which get called when a <App/> <ExpenseItem/> something like this is written, but now th
problem is initially it is called and everything get rendered... but after that when we click on button, the onclick 
function get executed but how does the DOM knows whether to render again or not....


Change in the regular variable does not re-render the component again, for the component to re-render again we will
use useState which define a state of a variable which upon change can help in re-rendering the component...

All hooks must be called directly inside the react component main function,not in nested function or not outside the
component function.....

const [stateValuePassedInUseState, settingStateValueFunction]=useState(initialValue)
settingStateValueFunction('NewStateValue');

Now whenever we call a settingStateValueFunction, it will schedule the change in state and re-render the 
react component function.....
 const [title, setTitle] = useState(props.title);
  const clickHandler = () => {
    setTitle("Updated");
    console.log(title);
  };

in console, prevTitle will be seen as it setTitle schedule the change not change it directly....
useState
1)Per component instance state is there, one component passed with different props will not be have the same state...
other instances will not be affected by the state change....
2)When a setTitle is called, its schedules the change in the title for the next call,when re-render it , the title 
in useState fetches the latest title and update itself....
3)React keep a record for the change in useState thing, for the first time, it will execute it with the initial 
stateValuePassedInUseState and then in the next run it will update itself as it now know we already have a first run...

onChange in input field return an event which event.target.value return the value entered...
By default event.target.value will always be a string not a number, or anything else...
TWO WAYS OF USESTATE
 //   const [enteredTitle, setEnteredTitle] = useState("");
  //   const [enteredAmout, setEnteredAmount] = useState("");
  //   const [enteredDate, setEnteredDate] = useState("");
  const [userInput, setUserInput] = useState({
    enteredAmout: "",
    enteredDate: "",
    enteredTitle: "",
  });
  const titleChangeHandler = (event) => {
    // setEnteredTitle(event.target.value);
    setUserInput({
      ...userInput,
      enteredTitle: event.target.value,
    });
  };
  const amountChangeHandler = (event) => {
    // setEnteredAmount(event.target.value);
    setUserInput({
      ...userInput,
      enteredAmout: event.target.value,
    });
  };
  const dateChangeHandler = (event) => {
    //setEnteredDate(event.target.value);
    setUserInput({
      ...userInput,
      enteredDate: event.target.value,
    });
  };
  RIGHT now this is incorrect approach, as what will happen , react reschedules the call so now, there are many calls
  which will be rescheduled so they might cause the issue... 
  for safety purpose, use like this

  
  setUserInput((prevState)=>{
    return {...prevState,enteredAmout:event.target.value}
  })

  key Consept=> whenever your new update, depends upons previous updates, use () function not direct as it will return 
  the latest snapshot...

  If a button especially of type submit, is pressed inside a form, it will emit an event onSubmit and if you click
  the submit button, the page reloads because the browser actually automatically sends a request whenever a form
  is submitted to the server whenever a form is submitted to the serve which is hosting the webpage.
  To prevent use event.preventDefault();
  on clicking submit, the router get changed localhost:3000/?

  Two-way binding=>we not just listen the inputs but we can also pass a new value back into the input so that 
  we can reset and change the input progamatically
  add value which will change onSubmit so this is a two-way binding

   const submitHandler = (e) => {
    e.preventDefault();
    const expenseData = {
      title: enteredTitle,
      amount: enteredAmount,
      date: new Date(enteredDate),
    };
    setEnteredAmount("");
    setEnteredDate("");
    setEnteredTitle("");
    console.log(expenseData);
  };
  return (
    <form onSubmit={submitHandler}>
      <div className="new-expense__controls">
        <div className="new-expense__control">
          <label>Title</label>
          <input
            type="text"
            value={enteredTitle}
            onChange={titleChangeHandler}
          />
        </div>
        <div className="new-expense__control">
          <label>Amount</label>
          <input
            type="number"
            min="0.01"
            steps="0.01"
            value={enteredAmount}
            onChange={amountChangeHandler}
          />
        </div>
        <div className="new-expense__control">
          <label>Date</label>
          <input
            type="date"
            min="2019-01-01"
            max="2022-12-31"
            value={enteredDate}
            onChange={dateChangeHandler}
          />
        </div>
      </div>
      <div className="new-expense__actions">
        <button type="submit">Add Expense</button>
      </div>
    </form>
  );

->When we doing the emit thing, we are controlling the component... Known as controlled component 
  It means that the value which is used in the component like the value selected in the dropdown is passed 
  on to a parent component through props and is received form the parent component.
-> Calling useState again will simply create a new state.
->If you update state that depends on the previous state, you should use the function form of the state updating 
 function instead.